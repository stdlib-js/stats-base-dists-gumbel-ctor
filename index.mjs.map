{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/assert-is-nan';\nimport entropy from '@stdlib/stats-base-dists-gumbel-entropy';\nimport kurtosis from '@stdlib/stats-base-dists-gumbel-kurtosis';\nimport mean from '@stdlib/stats-base-dists-gumbel-mean';\nimport median from '@stdlib/stats-base-dists-gumbel-median';\nimport mode from '@stdlib/stats-base-dists-gumbel-mode';\nimport skewness from '@stdlib/stats-base-dists-gumbel-skewness';\nimport stdev from '@stdlib/stats-base-dists-gumbel-stdev';\nimport variance from '@stdlib/stats-base-dists-gumbel-variance';\nimport cdf from '@stdlib/stats-base-dists-gumbel-cdf';\nimport logcdf from '@stdlib/stats-base-dists-gumbel-logcdf';\nimport logpdf from '@stdlib/stats-base-dists-gumbel-logpdf';\nimport mgf from '@stdlib/stats-base-dists-gumbel-mgf';\nimport pdf from '@stdlib/stats-base-dists-gumbel-pdf';\nimport quantile from '@stdlib/stats-base-dists-gumbel-quantile';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction gumbelCDF( x ) {\n\treturn cdf( x, this.mu, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction gumbelLogCDF( x ) {\n\treturn logcdf( x, this.mu, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction gumbelLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.beta );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction gumbelMGF( t ) {\n\treturn mgf( t, this.mu, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction gumbelPDF( x ) {\n\treturn pdf( x, this.mu, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction gumbelQuantile( p ) {\n\treturn quantile( p, this.mu, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Gumbel distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [beta=1.0] - scale parameter\n* @throws {TypeError} `beta` must be a positive number\n* @returns {Gumbel} distribution instance\n*\n* @example\n* var gumbel = new Gumbel( 1.0, 1.0 );\n*\n* var y = gumbel.cdf( 0.8 );\n* // returns ~0.295\n*\n* var mu = gumbel.mean;\n* // returns ~1.577\n*/\nfunction Gumbel() {\n\tvar beta;\n\tvar mu;\n\tif ( !(this instanceof Gumbel) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Gumbel();\n\t\t}\n\t\treturn new Gumbel( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', mu ) );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', beta ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Gumbel distribution differential entropy.\n*\n* @name entropy\n* @memberof Gumbel.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.entropy;\n* // returns ~4.062\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Gumbel.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.kurtosis;\n* // returns 2.4\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution expected value.\n*\n* @name mean\n* @memberof Gumbel.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.mean;\n* // returns ~10.927\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution median.\n*\n* @name median\n* @memberof Gumbel.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.median;\n* // returns ~8.398\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'median', function get() {\n\treturn median( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution mode.\n*\n* @name mode\n* @memberof Gumbel.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution skewness.\n*\n* @name skewness\n* @memberof Gumbel.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.skewness;\n* // returns ~1.14\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution standard deviation.\n*\n* @name stdev\n* @memberof Gumbel.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.stdev;\n* // returns ~15.39\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.beta );\n});\n\n/**\n* Gumbel distribution variance.\n*\n* @name variance\n* @memberof Gumbel.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var gumbel = new Gumbel( 4.0, 12.0 );\n*\n* var v = gumbel.variance;\n* // returns ~236.87\n*/\nsetReadOnlyAccessor( Gumbel.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Gumbel.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var gumbel = new Gumbel( 2.0, 4.0 );\n*\n* var v = gumbel.cdf( 0.5 );\n* // returns ~0.233\n*/\nsetReadOnly( Gumbel.prototype, 'cdf', gumbelCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Gumbel.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var gumbel = new Gumbel( 2.0, 4.0 );\n*\n* var v = gumbel.logcdf( 0.8 );\n* // returns ~-1.35\n*/\nsetReadOnly( Gumbel.prototype, 'logcdf', gumbelLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Gumbel.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var gumbel = new Gumbel( 2.0, 4.0 );\n*\n* var v = gumbel.logpdf( 0.8 );\n* // returns ~-2.436\n*/\nsetReadOnly( Gumbel.prototype, 'logpdf', gumbelLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Gumbel.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var gumbel = new Gumbel( 2.0, 4.0 );\n*\n* var v = gumbel.mgf( 0.2 );\n* // returns ~6.849\n*/\nsetReadOnly( Gumbel.prototype, 'mgf', gumbelMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Gumbel.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var gumbel = new Gumbel( 2.0, 4.0 );\n*\n* var v = gumbel.pdf( 0.8 );\n* // returns ~0.087\n*/\nsetReadOnly( Gumbel.prototype, 'pdf', gumbelPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Gumbel.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var gumbel = new Gumbel( 2.0, 4.0 );\n*\n* var v = gumbel.quantile( 0.5 );\n* // returns ~3.466\n*/\nsetReadOnly( Gumbel.prototype, 'quantile', gumbelQuantile );\n\n\n// EXPORTS //\n\nexport default Gumbel;\n"],"names":["Gumbel","beta","mu","this","arguments","length","isNumber","isnan","TypeError","format","isPositive","defineProperty","configurable","enumerable","get","set","value","setReadOnlyAccessor","prototype","entropy","kurtosis","mean","median","mode","skewness","stdev","variance","setReadOnly","x","cdf","logcdf","logpdf","t","mgf","pdf","p","quantile"],"mappings":";;+oEAwIA,SAASA,IACR,IAAIC,EACAC,EACJ,KAAOC,gBAAgBH,GACtB,OAA0B,IAArBI,UAAUC,OACP,IAAIL,EAEL,IAAIA,EAAQI,UAAW,GAAKA,UAAW,IAE/C,GAAKA,UAAUC,OAAS,CAGvB,GADAJ,EAAOG,UAAW,IACZE,EAFNJ,EAAKE,UAAW,KAEQG,EAAOL,GAC9B,MAAM,IAAIM,UAAWC,EAAQ,sEAAuEP,IAErG,IAAMQ,EAAYT,GACjB,MAAM,IAAIO,UAAWC,EAAQ,4EAA6ER,GAE7G,MACEC,EAAK,EACLD,EAAO,EA4BR,OA1BAU,EAAgBR,KAAM,KAAM,CAC3BS,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOZ,CACP,EACDa,IAAO,SAAcC,GACpB,IAAMV,EAAUU,IAAWT,EAAOS,GACjC,MAAM,IAAIR,UAAWC,EAAQ,qDAAsDO,IAEpFd,EAAKc,CACL,IAEFL,EAAgBR,KAAM,OAAQ,CAC7BS,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOb,CACP,EACDc,IAAO,SAAcC,GACpB,IAAMN,EAAYM,GACjB,MAAM,IAAIR,UAAWC,EAAQ,8DAA+DO,IAE7Ff,EAAOe,CACP,IAEKb,IACR,CAgBAc,EAAqBjB,EAAOkB,UAAW,WAAW,WACjD,OAAOC,EAAShB,KAAKD,GAAIC,KAAKF,KAC/B,IAgBAgB,EAAqBjB,EAAOkB,UAAW,YAAY,WAClD,OAAOE,EAAUjB,KAAKD,GAAIC,KAAKF,KAChC,IAgBAgB,EAAqBjB,EAAOkB,UAAW,QAAQ,WAC9C,OAAOG,EAAMlB,KAAKD,GAAIC,KAAKF,KAC5B,IAgBAgB,EAAqBjB,EAAOkB,UAAW,UAAU,WAChD,OAAOI,EAAQnB,KAAKD,GAAIC,KAAKF,KAC9B,IAgBAgB,EAAqBjB,EAAOkB,UAAW,QAAQ,WAC9C,OAAOK,EAAMpB,KAAKD,GAAIC,KAAKF,KAC5B,IAgBAgB,EAAqBjB,EAAOkB,UAAW,YAAY,WAClD,OAAOM,EAAUrB,KAAKD,GAAIC,KAAKF,KAChC,IAgBAgB,EAAqBjB,EAAOkB,UAAW,SAAS,WAC/C,OAAOO,EAAOtB,KAAKD,GAAIC,KAAKF,KAC7B,IAgBAgB,EAAqBjB,EAAOkB,UAAW,YAAY,WAClD,OAAOQ,EAAUvB,KAAKD,GAAIC,KAAKF,KAChC,IAkBA0B,EAAa3B,EAAOkB,UAAW,OAnS/B,SAAoBU,GACnB,OAAOC,EAAKD,EAAGzB,KAAKD,GAAIC,KAAKF,KAC9B,IAmTA0B,EAAa3B,EAAOkB,UAAW,UA1S/B,SAAuBU,GACtB,OAAOE,EAAQF,EAAGzB,KAAKD,GAAIC,KAAKF,KACjC,IA0TA0B,EAAa3B,EAAOkB,UAAW,UAjT/B,SAAuBU,GACtB,OAAOG,EAAQH,EAAGzB,KAAKD,GAAIC,KAAKF,KACjC,IAiUA0B,EAAa3B,EAAOkB,UAAW,OAxT/B,SAAoBc,GACnB,OAAOC,EAAKD,EAAG7B,KAAKD,GAAIC,KAAKF,KAC9B,IAwUA0B,EAAa3B,EAAOkB,UAAW,OA/T/B,SAAoBU,GACnB,OAAOM,EAAKN,EAAGzB,KAAKD,GAAIC,KAAKF,KAC9B,IA+UA0B,EAAa3B,EAAOkB,UAAW,YAtU/B,SAAyBiB,GACxB,OAAOC,EAAUD,EAAGhC,KAAKD,GAAIC,KAAKF,KACnC"}